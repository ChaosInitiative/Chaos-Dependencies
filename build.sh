#!/usr/bin/env bash
set -e

cd "$(dirname "$0")"

# Applies patch if it does not already exist
function apply-patch {
	if ! git apply --reverse --check < $1; then
		git apply $1
	fi
}

ARGS="$@"
ARGC="$#"

function should-build {
	if [ $ARGC -lt 1 ]; then
		return 0
	fi
	for a in $ARGS; do [ "$a" = "$1" ] && return 0; done
	return 1
}
INCDIR="$PWD/install/include"
LIBDIR="$PWD/install/lib"
INSTALLDIR="$PWD/install"

export CC="gcc"
export CXX="g++"

export PKG_CONFIG="pkg-config --static" 

# Pull in built executables in install pfx
export PATH="$PATH:$INSTALLDIR/bin"

# Grab the .pc files generated by our build
export PKG_CONFIG_PATH="$LIBDIR/pkgconfig"

export PATCHDIR="$PWD/patches"

# Global LDFLAGS - Use our version script!
# NOTE: omitting quotes around it because freetype shits itself during configure if you include them. Great.
export VERSION_SCRIPT="-Wl,--version-script=$PWD/version_script.txt"

echo "Building deps.."

#------------------------#
# Build libffi
#------------------------#
if should-build "libffi"; then
	pushd libffi > /dev/null

	export CFLAGS="-fPIC"

	./autogen.sh
	./configure --enable-static --enable-shared=no --enable-tools=no --enable-tests=no --enable-samples=no --prefix="$INSTALLDIR"
	make install -j$(nproc)

	popd > /dev/null
fi
#------------------------#

#------------------------#
# Unpack ICU. Originally was going to be compiled as submodule, but I kept getting aborts during the build process. Yay.
#------------------------#
if should-build "icu"; then
	# Don't re-download if we dont need to (just check random file)
	if [ ! -f install/lib/libicudata.so ]; then
		wget -O icu.tgz https://github.com/unicode-org/icu/releases/download/release-70-1/icu4c-70_1-Ubuntu-20.04-x64.tgz
		tar -xf icu.tgz
		cp -rf icu/usr/local/* ./install
		rm -rf icu
		rm -f icu.tgz
	fi
fi
#------------------------#

#------------------------#
# Build pcre
#------------------------#
if should-build "pcre"; then
	pushd pcre > /dev/null

	export CFLAGS="-fPIC"

	./autogen.sh
	./configure --enable-static --enable-shared=no --prefix="$INSTALLDIR" --enable-utf --enable-pcre16 --enable-pcre32
	make install -j$(nproc)

	popd > /dev/null
fi
#------------------------#


#------------------------#
# Build libmd
#------------------------#
if should-build "libmd"; then
	pushd libmd > /dev/null

	export CFLAGS="-fPIC"
	./autogen
	./configure --prefix="$INSTALLDIR" --enable-static --enable-shared=no
	make install -j$(nproc)

	popd > /dev/null
fi
#------------------------#


#------------------------#
# Build libz
#------------------------#
if should-build "zlib"; then
	pushd zlib > /dev/null

	export CFLAGS="-fPIC"
	./configure --static --64 --prefix="$INSTALLDIR"
	make install -j$(nproc)

	popd > /dev/null
fi
#------------------------#

#------------------------#
# Build bzip2
#------------------------#
if should-build "bzip2"; then
	pushd bzip2 > /dev/null

	make install -j$(nproc) CFLAGS=-fPIC LDFLAGS="$GLOBAL_LDFLAGS -fPIC" PREFIX="$INSTALLDIR"

	popd > /dev/null
fi
#------------------------#



#------------------------#
# Build gobject, gio, etc
#------------------------#
if should-build "glib"; then
	pushd glib > /dev/null

	export CFLAGS="-fPIC"

	meson build --buildtype release --default-library static --prefix "$INSTALLDIR" --libdir lib
	cd build
	ninja install

	# Glib puts its config in lib for some reason, so copy that out
	cp "$INSTALLDIR/lib/glib-2.0/include/glibconfig.h" "$INSTALLDIR/include/glib-2.0/"

	popd > /dev/null
fi
#------------------------#

#------------------------#
# Build pixman
#------------------------#
if should-build "pixman"; then
	pushd pixman > /dev/null

	export CFLAGS="-fPIC"
	./autogen.sh --enable-gtk=no --enable-png=no --enable-shared=no --enable-static --prefix="$INSTALLDIR"
	make install -j$(nproc)

	popd > /dev/null
fi
#------------------------#

#------------------------#
# Build brotli
#------------------------#
if should-build "brotli"; then
	pushd brotli > /dev/null

	./bootstrap
	export CFLAGS="-fPIC"
	./configure --enable-static --disable-shared --prefix="$INSTALLDIR"
	make install -j$(nproc)

	popd > /dev/null
fi
#------------------------#

#------------------------#
# Build libpng
#------------------------#
if should-build "libpng"; then
	pushd libpng > /dev/null

	export CFLAGS="-fPIC"
	./configure --enable-static --disable-shared --prefix="$INSTALLDIR"
	make install -j$(nproc)

	# --disable-shared does nothing, cool! 
	rm -f ../install/lib/libpng*.so*

	popd > /dev/null
fi
#------------------------#

#------------------------#
# Build jsonc
#------------------------#
if should-build "json-c"; then
	pushd json-c > /dev/null

	mkdir -p build && cd build
	../cmake-configure --enable-static --prefix="$INSTALLDIR" -- -DDISABLE_EXTRA_LIBS=ON -DCMAKE_BUILD_TYPE="Release"
	make install -j$(nproc)

	# Once again, no way to cull shared objects!
	rm -f "$PWD"/../../install/lib/libjson-c*.so*

	popd > /dev/null
fi
#------------------------#

#------------------------#
# Build expat
#------------------------#
if should-build "expat"; then
	pushd libexpat/expat > /dev/null

	./buildconf.sh
	export CFLAGS="-fPIC"

	./configure --without-docbook --without-examples --without-tests --enable-static --enable-shared=no --prefix="$INSTALLDIR"
	make install -j$(nproc)

	popd > /dev/null
fi
#------------------------#


#------------------------#
# Build freetype
#------------------------#
if should-build "freetype"; then
	pushd freetype > /dev/null

	# Setup pkgconfig overrides
	export LDFLAGS="$GLOBAL_LDFLAGS -L$LIBDIR -Wl,--no-undefined"
	export ZLIB_LIBS=""
	export BZIP2_LIBS=""
	# Manually specify link order for png, bz2, zlib and libm to avoid unresolved symbols due to single pass linking
	export LIBPNG_LIBS="$(realpath ../install/lib/libpng.a) -lbz2 -lz -lm"
	export BROTLI_LIBS="$(realpath ../install/lib/libbrotlidec.a) $(realpath ../install/lib/libbrotlienc.a) $(realpath ../install/lib/libbrotlicommon.a)"
	export CFLAGS="-fPIC"

	./autogen.sh
	./configure --with-harfbuzz=no --enable-shared --disable-static --prefix="$INSTALLDIR"
	make install -j$(nproc)

	popd > /dev/null
fi
#------------------------#


#------------------------#
# Build fontconfig
#------------------------#
if should-build "fontconfig"; then
	pushd fontconfig > /dev/null

	export LDFLAGS="$GLOBAL_LDFLAGS -L$LIBDIR -Wl,--no-undefined"

	# Override pkgconfig stuff
	export CFLAGS="-fPIC -I$INCDIR"
	export FREETYPE_CFLAGS="-I$INCDIR/freetype2 -I$INCDIR/freetype2/freetype"
	export FREETYPE_LIBS="-L$LIBDIR -lfreetype"
	export EXPAT_CFLAGS=""
	export EXPAT_LIBS="$LIBDIR/libexpat.a"
	export JSONC_CFLAGS="-I$INCDIR/json-c"
	export JSONC_LIBS="$LIBDIR/libjson-c.a"

	apply-patch "$PATCHDIR/fontconfig/002-add-face-sub.patch"

	./autogen.sh --enable-static=no --prefix="$INSTALLDIR" --with-expat="$INSTALLDIR" 
	make install -j$(nproc)

	popd > /dev/null
fi
#------------------------#

#------------------------#
# Build c2man (needed for fribidi)
#------------------------#
if should-build "c2man"; then
	pushd c2man > /dev/null

	./Configure -s -d -e
	make -j$(nproc)

	# No good install rules with this cursed build system
	cp c2man ../install/bin/

	popd > /dev/null
fi
#------------------------#

#------------------------#
# Build fribidi
#------------------------#
if should-build "fribidi"; then
	pushd fribidi > /dev/null

	export CFLAGS="-fPIC"
	./autogen.sh --prefix="$INSTALLDIR" --enable-shared=no --enable-static 

	make install -j$(nproc)

	popd > /dev/null
fi
#------------------------#

#------------------------#
# Build cairo
#------------------------#
if should-build "cairo"; then
	pushd cairo > /dev/null

	export LDFLAGS="$GLOBAL_LDFLAGS -fPIC -L$LIBDIR -Wl,--no-undefined"
	export CFLAGS="-fPIC"
	export pixman_LIBS="$LIBDIR/libpixman-1.a"
	export png_LIBS="$LIBDIR/libpng.a"
	export FREETYPE_LIBS="-L$LIBDIR -lfreetype"
	export FONTCONFIG_LIBS="-L$LIBDIR -lfontconfig"

	./autogen.sh --enable-xlib=no --enable-xlib-xrender=no --enable-xlib-xcb=no --enable-xcb-shm=no --enable-ft --enable-egl=no --without-x --enable-glx=no --enable-wgl=no --enable-quartz=no --enable-svg=yes --enable-pdf=yes --enable-ps=yes --enable-gobject=no --enable-png --disable-static --prefix="$INSTALLDIR"

	make install -j$(nproc)

	popd > /dev/null
fi
#------------------------#

#------------------------#
# Build harfbuzz
#------------------------#
if should-build "harfbuzz"; then
	pushd harfbuzz > /dev/null

	export CFLAGS="-fPIC"
	export LDFLAGS="$GLOBAL_LDFLAGS -L$LIBDIR"

	./autogen.sh --prefix="$INSTALLDIR" --enable-shared=no --enable-static 
	make install -j$(nproc)

	popd > /dev/null
fi
#------------------------#

#------------------------#
# Build pango
#------------------------#
if should-build "pango"; then
	pushd pango > /dev/null

	export CFLAGS="-fPIC"
	export LDFLAGS="$GLOBAL_LDFLAGS -L$LIBDIR -Wl,--no-undefined"

	apply-patch "$PATCHDIR/pango/001-add-face-sub.patch"

	MESON_COMMAND=
	[ -f build ] && MESON_COMMAND="--reconfigure"
	meson $MESON_COMMAND build --prefix "$INSTALLDIR" --buildtype release --libdir lib --pkg-config-path "$LIBDIR/pkgconfig" --build.pkg-config-path "$LIBDIR/pkgconfig"
	cd build
	ninja install

	popd > /dev/null
fi
#------------------------#

#------------------------#
# Build ssl
#------------------------#
if should-build "openssl"; then
	pushd openssl > /dev/null

	./config --prefix="$INSTALLDIR"
	make -j$(nproc)
	make install_sw # NOTE: Can't run with more than 1 job otherwise it fails! Nice! 

	popd > /dev/null
fi
#------------------------#

#------------------------#
# Build curl
#------------------------#
if should-build "curl"; then
	pushd curl > /dev/null

	mkdir -p build 
	cd build

	# It's 2022 yet we still can't easily build thing statically, yay! Disable curl's EXE because it fails with static build.
	cmake .. -DCMAKE_CXX_FLAGS="-fPIC" -DCMAKE_C_FLAGS="-fPIC" -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="$INSTALLDIR" -DBUILD_CURL_EXE=OFF 
	make -j8 install

	popd > /dev/null
fi
#------------------------#

#------------------------#
# Build libogg
#------------------------#
if should-build "libogg"; then
	pushd ogg > /dev/null

	mkdir -p build && cd build
	cmake .. -DCMAKE_CXX_FLAGS=-fPIC -DCMAKE_C_FLAGS=-fPIC -DCMAKE_INSTALL_PREFIX="$INSTALLDIR"

	make install -j$(nproc)
	
	popd > /dev/null
fi
#------------------------#


#------------------------#
# Build libvpx
#------------------------#
if should-build "libvpx"; then
	pushd libvpx > /dev/null

	./configure --disable-unit-tests --disable-examples --disable-docs --disable-tools --disable-shared --target=x86_64-linux-gcc --enable-static --prefix="$INSTALLDIR"

	make install -j$(nproc)
	
	popd > /dev/null
fi
#------------------------#

#------------------------#
# Build libwebm
#------------------------#
if should-build "libwebm"; then
	pushd libwebm > /dev/null

	mkdir -p build && cd build
	cmake .. -DCMAKE_C_FLAGS=-fPIC -DCMAKE_CXX_FLAGS=-fPIC -DCMAKE_INSTALL_PREFIX="$INSTALLDIR"

	make -j$(nproc)

	# No install rule for libwebm????
	cp libwebm.a "$INSTALLDIR/lib/libwebm.a"

	popd > /dev/null
fi
#------------------------#

#------------------------#
# Build vorbis
#------------------------#
if should-build "vorbis"; then
	pushd vorbis > /dev/null

	mkdir -p build && cd build
	cmake .. -DCMAKE_C_FLAGS=-fPIC -DCMAKE_CXX_FLAGS=-fPIC -DCMAKE_INSTALL_PREFIX="$INSTALLDIR" 

	make install -j$(nproc)

	popd > /dev/null
fi
#------------------------#

#------------------------#
# Build SDL2
#------------------------#
if should-build "SDL2"; then
	pushd SDL > /dev/null

    ./configure --enable-cpuinfo --enable-video-wayland --enable-joystick --enable-render --enable-sse3 --enable-video  --enable-video-x11 --enable-video-vulkan --enable-xinput --enable-audio --enable-threads --with-x --prefix="$INSTALLDIR"

	make install -j$(nproc)

	popd > /dev/null
fi
#------------------------#

#------------------------#
# Build dxvk-native
#------------------------#
if should-build "dxvk-native"; then
	pushd dxvk-native > /dev/null

	export LDFLAGS="$GLOBAL_LDFLAGS $VERSION_SCRIPT -L$LIBDIR -static-libstdc++ -static-libgcc"
	export CFLAGS="-I$INSTALLDIR/include"
	export CXXFLAGS="-I$INSTALLDIR/include"
	meson --buildtype release --libdir lib --prefix "$INSTALLDIR" --pkg-config-path "$LIBDIR/pkgconfig" --build.pkg-config-path "$LIBDIR/pkgconfig" build_linux64
	cd build_linux64
	ninja install

	popd > /dev/null
fi
#------------------------#

#------------------------#
# Create release tarball
#------------------------#
RELEASEBIN="release/bin/linux64"
RELEASELIB="release/lib/external/linux64"
if should-build "release"; then
	mkdir -p release/lib/external/linux64
	mkdir -p release/bin/linux64
	# Publish all runtime SOs
	RT=(libdxvk_dxgi.so libdxvk_d3d11.so libdxvk_d3d9.so libSDL2.so libcairo.so libfreetype.so libfontconfig.so libicudata.so libicui18n.so libicuio.so libicuuc.so libicutu.so libpango-1.0.so libpangocairo-1.0.so libpangoft2-1.0.so)
	for l in ${RT[@]}; do
		LIB="$(readelf -d install/lib/$l | grep "SONAME" | grep -oP "\[\K[^\]]+")"
		cp -fv "install/lib/$LIB" "$RELEASEBIN/$LIB"
		cp -fv "install/lib/$l" "$RELEASELIB/$l"
		strip -x "$RELEASEBIN/$LIB"
	done

	# Publish all other static libs
	LIBS=(libz.a libexpat.a libcrypto.a libssl.a libcurl.a libvpx.a libogg.a libwebm.a libvorbis.a libvorbisenc.a libvorbisfile.a)
	for l in ${LIBS[@]}; do
		cp -fv "$INSTALLDIR/lib/$l" "release/lib/external/linux64/$l"
	done

	# Publish headers
	IDIR="release/include"
	rm -rf "$IDIR" || true
	cp -rfv "$INSTALLDIR/include" "$IDIR"

	# Cull some of the headers we don't need...
	rm -fv "$IDIR/png*.h"

	tar -cf chaos-deps.tgz release/
fi

